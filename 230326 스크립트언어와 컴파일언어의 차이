
- 인터프리터 언어: 
인터프리터 언어는 인터프리터에 의해 코드를 한 줄씩 번역하고 실행합니다. 코드가 런타임에 해석됩니다. 단점으로는 실행 속도가 느려질 수 있음을 의미합니다. 
또한 런타임에 오류가 보고되어 디버깅이 더 어려워질 수 있습니다. 인터프리터 언어의 예로는 Python, Ruby 및 JavaScript가 있습니다.
- 컴파일러 언어:
 전체 코드를 한 번에 번역하고 런타임 전에 실행 파일로 컴파일합니다. 이렇게 하면 컴파일 중에 오류가 보고되므로 실행 속도가 빨라지고 디버깅이 쉬워집니다. 
 컴파일러 언어의 예로는 C++, Java 및 Go가 있습니다.또한 컴파일언어는 정적 타입 언어로 변수의 자료형이 고정되어 있으나, 스크립트언어는 동적 타입 언어로 변수의 자료형이 유동적입니다.
- 어떤 언어를 선택해야하는지: 
그러나 어떤 유형의 언어가 더 나은지는 상황에 따라 다릅니다. 인터프리터 언어는 개발 주기가 짧기 때문에 스크립팅(파일 처리, 데이터베이스 쿼리, 자동화된 작업 및 신속한 프로토타이핑에 자주 사용됩니다. 
컴파일러 언어는 실행 속도가 빠르고 시간이 지남에 따라 유지 관리가 더 쉽기 때문에 대규모 프로젝트 및 소프트웨어 개발에 더 적합합니다.
- 최근 발전사항: 최근에는 JIT 컴파일러를 사용하여 실행 속도를 높이는 등 컴파일언어와 스크립트언어의 경계가 모호해지고 있습니다. 
특히 TypeScript와 같은 언어는 정적 타입 언어와 동적 타입 언어의 장점을 결합하여 새로운 방식으로 개발된 것이라고 합니다. 


결론: 프로젝트에 적합한 언어를 선택하는 것이 중요할 것 같다. 


## 런타임 단계와 컴파일 단계의 주요 차이점
 프로그램을 실행하는 과정에서 발생한다는 것입니다.
컴파일 단계에서 프로그램의 소스 코드는 컴퓨터에서 실행할 수 있는 기계 코드로 변환됩니다. 이 프로세스는 전체 소스 코드를 읽고 대상 플랫폼에서 실행할 수 있는 실행 파일 또는 바이너리 파일을 생성하는 컴파일러에 의해 수행됩니다. 컴파일 단계의 출력은 일반적으로 소스 코드 없이도 다른 컴퓨터에서 배포 및 실행할 수 있는 실행 파일 또는 라이브러리입니다.
반대로 런타임 단계에서는 컴파일된 코드가 컴퓨터에서 실행됩니다. 이것은 프로그램이 실제로 실행되고 컴퓨터가 컴파일 단계에서 생성된 기계 코드를 해석하는 때입니다. 이 단계에서 프로그램은 의도한 기능을 수행하기 위해 컴퓨터의 하드웨어 및 기타 소프트웨어 구성 요소와 상호 작용합니다.
요약하면 컴파일 단계는 프로그램이 실행되기 전에 발생하며 소스 코드를 실행할 수 있는 기계어로 번역하는 단계입니다. 런타임 단계는 프로그램 실행 중에 발생하며 컴퓨터에서 기계 코드의 실제 실행과 관련됩니다.
